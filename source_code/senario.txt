1. 메모 서비스 (To Do List)
2. 메모 서비스의 기능은 무엇?
    2-1. 계정 관리 (로그인, 로그아웃, 회원 정보 변경)
    2-2. 메모 관리 (CRUD), 메모 암호화?
3. 로그인 로그아웃은 JWT 기반으로 수행
4. 메모 관리에서 필요한 메모 정보는?
    4-1. 작성자 id, 메모 내용, 최초 작성 시간, 최신 수정 시간, 예정 시간, 할일 구분, 수행 여부
    4-2. 암호화 적용 시, 비밀번호 정보 필요

5. DB에서 필요한 정보는?
    5-1. 유저, 아이디 비밀번호 이름
    5-2. 메모
    5-3. 할일 분류
-------------------------------------------------------------

Url Flow

로그인 화면 - To Do List

http call

# Create
put /users(user data) #유저 데이터 입력 --- OK
 = INSERT INTO user (user_id, user_pwd, user_name) valuse ()

put /todoes(todo data) #할일 데이터 입력
 = INSERT INTO todo (todo_id, user_id, class_name, todo_text, todo_create_time, todo_update_time, todo_target_time, todo check) valuse ()

put /categories(token, class_name) #분류 데이터 입력
 = INSERT INTO class (token.id, class_name) valuse ()

# Read
get /users/login(id,pwd) #로그인 시도 #반환값 : token or Error --- OK
 = SELECT user_id, user_name FROM user WHERE user_id == id AND user_pwd == pwd

 if result.length == 1
    return token(user_id, user_name, sign)
 else
    return error

get /users/checkid(id) #아이디 중복 체크 #반환값 : 1 or 0 --- OK
 = SELECT user_id FROM user WHERE user_id == id

 if result.length != 0
    return false
 else
    return true

get /todoes(token) #할일 목록 조회 #반환값 : 할일 목록
 = SELECT todo_id, class_name, todo_text, todo_target_time, todo_check FROM todo WHERE user_id == token.id

get /categories(token) #분류 목록 조회 #반환값 : 분류 목록
 = SELECT class_name FROM class WHERE user_id = token.id

# Update
post /users(token, userData) --- OK
 = Update user SET 'user_pwd' = userData.pwd, 'user_name' = userData.name WHERE user_id == toekn.id

post /todoes(token, todoData)
 = Update todo 
 
   SET 'class_name' = todoData.name, 'todo_text' = todoData.text, 'todo_update_time' = %현재시간%, 
                         'todo_target_time' = token.target_time, 'todo_check' = todoData.check
 
   WHERE user_id == toekn.id AND todo_id == todoData.id

post /categories(token, classData) --- NO
 = Update class SET 'class_name' = classData.name WHERE user_id == token.id

# Delete
delete /users(token) --- OK
 = DELETE FROM user WHERE user_id == token.id

delete /todoes(token, todoData)
 = DELETE FROM todo WHERE user_id == token.id AND todo_id == todoData.id
 
delete /categories(token, classData) --- OK
 = DELETE FROM class WHERE user_id == token.id AND class_name == classData.name